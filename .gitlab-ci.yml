image: docker:stable

services:
    - docker:stable-dind

variables:
  GIT_DEPTH: "1"
  IMAGE_NAME: "${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}"
  OS: "${CI_COMMIT_REF_NAME}"

before_script:
  - apk add --no-cache git bash findutils
  - if [[ -n $NV_CI_INTERNAL ]]; then
      export REGISTRY="gitlab-master.nvidia.com:5005";
      export REGISTRY_USER="gitlab-ci-token";
      export REGISTRY_TOKEN="${CI_JOB_TOKEN}";
      export IMAGE_NAME="${REGISTRY}/${IMAGE_NAME}";
    fi
  - docker login -u "${REGISTRY_USER}" -p "${REGISTRY_TOKEN}" "${REGISTRY}";

stages:
  - cuda
  - cudnn
  - test
  - deploy

.cuda_template: &cuda_definition
  stage: cuda
  script:
    - VERSION="${CI_JOB_NAME:1}"
    - docker build -t "${IMAGE_NAME}:${VERSION}-runtime-${OS}"
                   --cache-from "${IMAGE_NAME}:${VERSION}-runtime-${OS}-disable"
                   "${VERSION}/runtime"
    - docker build -t "${IMAGE_NAME}:${VERSION}-devel-${OS}"
                   --cache-from "${IMAGE_NAME}:${VERSION}-devel-${OS}-disable"
                   --build-arg "IMAGE_NAME=${IMAGE_NAME}"
                   "${VERSION}/devel"
    - if [[ "${NO_OS_SUFFIX}" == true ]]; then
        docker tag "${IMAGE_NAME}:${VERSION}-runtime-${OS}" "${IMAGE_NAME}:${VERSION}-runtime";
        docker tag "${IMAGE_NAME}:${VERSION}-devel-${OS}" "${IMAGE_NAME}:${VERSION}-devel";
      fi
    - if [[ "${LATEST}" == true ]]; then
        docker tag "${IMAGE_NAME}:${VERSION}-devel-${OS}" "${IMAGE_NAME}:latest";
      fi

.cuda_base_template: &cuda_base_definition
  stage: cuda
  script:
    - VERSION="${CI_JOB_NAME:1}"
    - docker build -t "${IMAGE_NAME}:${VERSION}-base-${OS}"
                   --cache-from "${IMAGE_NAME}:${VERSION}-base-${OS}-disable"
                   "${VERSION}/base"
    - docker build -t "${IMAGE_NAME}:${VERSION}-runtime-${OS}"
                   --cache-from "${IMAGE_NAME}:${VERSION}-runtime-${OS}-disable"
                   --build-arg "IMAGE_NAME=${IMAGE_NAME}"
                   "${VERSION}/runtime"
    - docker build -t "${IMAGE_NAME}:${VERSION}-devel-${OS}"
                   --cache-from "${IMAGE_NAME}:${VERSION}-devel-${OS}-disable"
                   --build-arg "IMAGE_NAME=${IMAGE_NAME}"
                   "${VERSION}/devel"
    - if [[ "${NO_OS_SUFFIX}" == true ]]; then
        docker tag "${IMAGE_NAME}:${VERSION}-base-${OS}" "${IMAGE_NAME}:${VERSION}-base";
        docker tag "${IMAGE_NAME}:${VERSION}-runtime-${OS}" "${IMAGE_NAME}:${VERSION}-runtime";
        docker tag "${IMAGE_NAME}:${VERSION}-devel-${OS}" "${IMAGE_NAME}:${VERSION}-devel";
      fi
    - if [[ "${LATEST}" == true ]]; then
        docker tag "${IMAGE_NAME}:${VERSION}-devel-${OS}" "${IMAGE_NAME}:latest";
      fi

.cudnn_template: &cudnn_definition
  stage: cudnn
  script:
    - VERSION="${CI_JOB_NAME:1}"
    - CUDA_VERSION="${VERSION%-*}"
    - CUDNN_VERSION="${VERSION#*-}"
    - docker pull "${IMAGE_NAME}:${VERSION}-runtime-${OS}" || true
    - docker build -t "${IMAGE_NAME}:${VERSION}-runtime-${OS}"
                   --cache-from "${IMAGE_NAME}:${VERSION}-runtime-${OS}-disable"
                   --build-arg "IMAGE_NAME=${IMAGE_NAME}"
                   "${CUDA_VERSION}/runtime/${CUDNN_VERSION}"
    - docker pull "${IMAGE_NAME}:${VERSION}-devel-${OS}" || true
    - docker build -t "${IMAGE_NAME}:${VERSION}-devel-${OS}"
                   --cache-from "${IMAGE_NAME}:${VERSION}-devel-${OS}-disable"
                   --build-arg "IMAGE_NAME=${IMAGE_NAME}"
                   "${CUDA_VERSION}/devel/${CUDNN_VERSION}"
    - if [[ "${NO_OS_SUFFIX}" == true ]]; then
        docker tag "${IMAGE_NAME}:${VERSION}-runtime-${OS}" "${IMAGE_NAME}:${VERSION}-runtime";
        docker tag "${IMAGE_NAME}:${VERSION}-devel-${OS}" "${IMAGE_NAME}:${VERSION}-devel";
      fi

.test_template: &test_definition
  stage: test
  script:
    - CUDA_VERSION="${CI_JOB_NAME%-*}"
    - CUDA_TEST_VERSION="${CUDA_VERSION:1}"
    - git clone https://gitlab.com/nvidia/cuda-docker-test.git
    - cd cuda-docker-test/
    - git log -1 --pretty=oneline
    - bash -e ./scripts/bats_install.sh
    - bash -e ./scripts/run_tests.sh

.deploy_template: &deploy_definition
  stage: deploy
  script:
    - CUDA_VERSION="${CI_JOB_NAME%-*}"
    - docker images | grep ${IMAGE_NAME} | grep "${CUDA_VERSION:1}" | grep "\(${OS}\ \|-base\ \|-devel\ \|-runtime\ \)" | awk '{ print $1":"$2 }' | xargs -L1 docker push

v8.0:
  tags:
    - cuda-docker
  <<: *cuda_definition

v8.0-cudnn5:
  tags:
    - cuda-docker
  <<: *cudnn_definition

v8.0-cudnn6:
  tags:
    - cuda-docker
  <<: *cudnn_definition

v8.0-cudnn7:
  tags:
    - cuda-docker
  <<: *cudnn_definition

# FIXME: need cuda 8.0 runner
.v8.0-test:
  tags:
    - cuda-docker
  <<: *test_definition

v8.0-deploy:
  tags:
    - cuda-docker
  <<: *deploy_definition

v10.0:
  tags:
    - cuda-docker
  <<: *cuda_base_definition

v10.0-cudnn7:
  tags:
    - cuda-docker
  <<: *cudnn_definition

# FIXME: need cuda 10.0 runner
.v10.0-test:
  tags:
    - cuda-docker
  <<: *test_definition

v10.0-deploy:
  tags:
    - cuda-docker
  <<: *deploy_definition

v10.1:
  tags:
    - cuda-docker-10.1
  <<: *cuda_base_definition

v10.1-cudnn7:
  tags:
    - cuda-docker-10.1
  <<: *cudnn_definition

v10.1-test:
  tags:
    - cuda-docker-10.1
  <<: *test_definition

v10.1-deploy:
  tags:
    - cuda-docker-10.1
  <<: *deploy_definition
